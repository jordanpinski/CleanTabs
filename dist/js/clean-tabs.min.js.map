{"version":3,"sources":["scripts.js","components/clean-tabs.js"],"names":["document","addEventListener","event","window","NodeList","prototype","forEach","Element","matches","webkitMatchesSelector","closest","s","el","this","parentElement","parentNode","nodeType","CleanTabs","cleanTabs","arguments","length","undefined","options","_classCallCheck","_name","_version","beforeOpen","afterOpen","beforeClose","afterClose","init","addGuids","buildMobile","_this","cleanTab","handleTabClick","button","tab","target","hash","anchor","querySelector","guid","dataset","content","preventDefault","concat","open","accordion","classList","add","accordionGroup","buttons","tabGroup","querySelectorAll","i","close","_this2","createElement","tempContent","accordionTitle","title","innerText","accordionContent","wrapper","innerHTML","appendChild","nextSibling","_this3","insertBefore","initializeCleanAccordion","cleanAccordion","contentIndex","CleanAccordion","contents","cleanAccordionGroups","singleOpen","handleResize","debounce","bind","bindEvents","defaultOptions","_this4","handleAccordionClick","hasAttribute","openClose","_this5","cleanAccordionGroup","calculateContentHeight","contains","height","Array","slice","call","children","child","scrollHeight","style","maxHeight","closeAll","remove","resetContentHeight","_this6","dataOptions","getDataOptions","JSON","parse","func","immediate","timeout","context","args","callNow","clearTimeout","setTimeout","accordions","wait","apply"],"mappings":"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","file":"clean-tabs.min.js","sourcesContent":["document.addEventListener('DOMContentLoaded', function(event) {\r\n\r\n  // Polyfills\r\n  if (window.NodeList && !NodeList.prototype.forEach) {\r\n    NodeList.prototype.forEach = Array.prototype.forEach;\r\n  }\r\n\r\n  if (!Element.prototype.matches) {\r\n    Element.prototype.matches =\r\n      Element.prototype.msMatchesSelector || \r\n      Element.prototype.webkitMatchesSelector;\r\n  }\r\n  \r\n  if (!Element.prototype.closest) {\r\n    Element.prototype.closest = function(s) {\r\n      var el = this;\r\n  \r\n      do {\r\n        if (Element.prototype.matches.call(el, s)) return el;\r\n        el = el.parentElement || el.parentNode;\r\n      } while (el !== null && el.nodeType === 1);\r\n      return null;\r\n    };\r\n  }\r\n\r\n});\r\n","/**\r\n * Plugin entry point.\r\n */\r\nclass CleanTabs {\r\n  constructor(cleanTabs = [], options) {\r\n    this.cleanTabs = cleanTabs;\r\n    if (this.cleanTabs.length <= 0) return;\r\n\r\n    const defaultOptions = {\r\n      _name: 'CleanTabs',\r\n      _version: '1.0.0',\r\n      beforeOpen: (tab) => {},\r\n      afterOpen: (tab) => {},\r\n      beforeClose: (tab) => {},\r\n      afterClose: (tab) => {}  \r\n    }\r\n\r\n    this.options = { ...defaultOptions, ...options };\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.addGuids();\r\n    this.buildMobile();\r\n    this.bindEvents();\r\n  }\r\n\r\n  bindEvents() {\r\n    this.cleanTabs.forEach( (cleanTab) => {\r\n      cleanTab.addEventListener('click', (event) => { this.handleTabClick(event); })\r\n    });\r\n  }\r\n\r\n  handleTabClick(event) {\r\n    event.preventDefault;\r\n    if(!event.target.closest('[data-button]')) return;\r\n\r\n    let button = event.target.closest('[data-button]');\r\n    let anchor = button.querySelector('a');\r\n    let hash = anchor.hash !== '' ? anchor.hash : false;\r\n    let guid = button.dataset.guid;\r\n    let content;\r\n\r\n    if (hash) {\r\n\r\n      // Target is defined in the anchor's hash\r\n      content = document.querySelector(hash);\r\n    } else {\r\n\r\n      // If target isn't defined in anchor's hash use the buttons guid.\r\n      content = document.querySelector(`[data-tab-group] [data-content][data-guid=\"${guid}\"]`);\r\n    }\r\n\r\n    let tab = {\r\n      button: button,\r\n      content: content,\r\n      guid: guid\r\n    }\r\n\r\n    this.open(tab);\r\n  }\r\n\r\n  open(tab) {\r\n    let { button, content, guid } = tab;\r\n    \r\n    // 1. Before open callback\r\n    this.options.beforeOpen();\r\n\r\n    // 2. Close all open tabs\r\n    this.closeAll(tab);\r\n    \r\n    // 3. Open mobile\r\n    if (guid >= 0) {\r\n      let guid = button.closest('[data-tab-group]').dataset.guid;\r\n      let accordionGroup = document.querySelector(`[data-accordion-group][data-guid=\"${guid}\"]`);\r\n      let accordion = accordionGroup.querySelector(`[data-accordion][data-guid=\"${tab.guid}\"]`);\r\n  \r\n      window.cleanAccordion.open(accordion);\r\n    }\r\n\r\n    // 3. Open\r\n    button.classList.add('open');\r\n    content.classList.add('open');\r\n\r\n    // 4. After open callback\r\n    this.options.afterOpen();\r\n  }\r\n\r\n  close(tab) {\r\n    let { button, content } = tab;\r\n\r\n    // 1. Before close callback\r\n    this.options.beforeClose();\r\n\r\n    button.classList.remove('open');\r\n    content.classList.remove('open');\r\n\r\n    // 2. After close callback\r\n    this.options.afterClose();\r\n  }\r\n\r\n  closeAll(tab) {\r\n    let tabGroup = tab.button.closest('[data-tab-group');\r\n    let buttons = tabGroup.querySelectorAll('[data-button]');\r\n    let content = tabGroup.querySelectorAll('[data-content]');\r\n\r\n    for (var i = 0; i < buttons.length; i++) {\r\n      let tab = {\r\n        button: buttons[i],\r\n        content: content[i]\r\n      }\r\n      this.close(tab);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Builds the mobile accordion\r\n   */\r\n  buildMobile() {\r\n\r\n    this.cleanTabs.forEach( (cleanTab) => {\r\n      let guid = cleanTab.dataset.guid;\r\n      let buttons = cleanTab.querySelectorAll('[data-button] a');\r\n      let content = cleanTab.querySelectorAll('[data-content]');\r\n\r\n      // 1. Create the accordion group\r\n      let accordionGroup = document.createElement('div');\r\n      accordionGroup.dataset.accordionGroup = \"\";\r\n      accordionGroup.dataset.guid = guid;\r\n\r\n      for (var i = 0; i < buttons.length; i++) {\r\n\r\n        let button = buttons[i];\r\n        let tempContent = content[i];\r\n\r\n        // 2. Create an accordion for each tab\r\n        let accordion = document.createElement('div');\r\n        accordion.dataset.accordion = \"\";\r\n        accordion.dataset.guid = [i];\r\n\r\n        // Create the accordion title\r\n        let accordionTitle = document.createElement('div');\r\n        accordionTitle.dataset.title = \"\";\r\n        accordionTitle.innerText = button.innerText;\r\n  \r\n        // Create the accordion content\r\n        let accordionContent = document.createElement('div');\r\n        accordionContent.dataset.content = \"\";\r\n\r\n        let wrapper = document.createElement('div');\r\n        wrapper.classList.add('wrapper')\r\n        wrapper.innerHTML = tempContent.innerHTML;\r\n        accordionContent.appendChild(wrapper);\r\n        \r\n        accordion.appendChild(accordionTitle)\r\n        accordion.appendChild(accordionContent);\r\n        accordionGroup.appendChild(accordion);\r\n      }\r\n\r\n      cleanTab.parentNode.insertBefore(accordionGroup, cleanTab.nextSibling);\r\n      this.initializeCleanAccordion(cleanTab, [accordionGroup]);\r\n    });\r\n\r\n  }\r\n\r\n  initializeCleanAccordion(cleanTab, accordionGroup) {\r\n    let cleanAccordion = new CleanAccordion(accordionGroup, {\r\n      afterOpen: (accordion) => {\r\n\r\n        // 1. Find the corresponding tab group\r\n        let accordionGroup = accordion.closest('[data-accordion-group]');\r\n        let tabGroup = document.querySelector(`[data-tab-group][data-guid=\"${accordionGroup.dataset.guid}\"]`);\r\n\r\n        // 2. Find the corresponding tab by guid.\r\n        let guid = parseInt(accordion.dataset.guid);\r\n        let button = tabGroup.querySelector(`[data-button][data-guid=\"${guid}\"]`);\r\n        let content = tabGroup.querySelector(`[data-content][data-guid=\"${guid}\"]`);\r\n\r\n        this.open({button, content});\r\n        \r\n      }\r\n    });\r\n\r\n    window.cleanAccordion = cleanAccordion;\r\n  }\r\n\r\n  addGuids() {\r\n    this.cleanTabs.forEach( (cleanTab, index) => {\r\n      cleanTab.dataset.guid = index;\r\n\r\n      let buttons = cleanTab.querySelectorAll('[data-button]');\r\n      buttons.forEach( (button, buttonIndex) => {\r\n        button.dataset.guid = buttonIndex;\r\n      })\r\n\r\n      let contents = cleanTab.querySelectorAll(['[data-content]']);\r\n      contents.forEach( (content, contentIndex) => {\r\n        content.dataset.guid = contentIndex;\r\n      })\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Entry point to the plugin.\r\n */\r\nclass CleanAccordion {\r\n  constructor(cleanAccordionGroups = [], options = {}) {\r\n    this.cleanAccordionGroups = cleanAccordionGroups;\r\n    if (this.cleanAccordionGroups.length <= 0) return;\r\n\r\n    const defaultOptions = {\r\n      _name: 'CleanAccordion',\r\n      _version: '1.0.0',\r\n      singleOpen: true,                 // Should only one accordion be open at a time?\r\n      beforeOpen: (accordion) => {},\r\n      afterOpen: (accordion) => {},\r\n      beforeClose: (accordion) => {},\r\n      afterClose: (accordion) => {}\r\n    }\r\n\r\n    this.options = { ...defaultOptions, ...options }\r\n    this.handleResize = this.debounce(this.handleResize.bind(this), 100);\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.bindEvents();\r\n  }\r\n\r\n  bindEvents() {\r\n\r\n    // cleanAccordionGroup click events\r\n    this.cleanAccordionGroups.forEach( (cleanAccordion) => {\r\n      cleanAccordion.addEventListener('click', (event) => { this.handleAccordionClick(event) });\r\n    });\r\n\r\n    // Resizing\r\n    window.addEventListener('resize', () => { this.handleResize() })\r\n  }\r\n\r\n  handleAccordionClick(event) {\r\n    let target = event.target;\r\n    let accordion = target.parentNode\r\n\r\n    // 1. Check if the title was clicked\r\n    if (target.hasAttribute('data-title')) {\r\n\r\n      // 2. Open/Close the accordion\r\n      this.openClose(accordion);\r\n\r\n    }\r\n  }\r\n\r\n  handleResize() {\r\n    this.cleanAccordionGroups.forEach( (cleanAccordionGroup) => {\r\n      const contents = cleanAccordionGroup.querySelectorAll('[data-content]');\r\n      contents.forEach( content => {\r\n        this.calculateContentHeight(content);\r\n      });\r\n    });\r\n  }\r\n\r\n  openClose(accordion) {\r\n    if (accordion.classList.contains('open')) {\r\n      this.close(accordion);\r\n    } else {\r\n      this.open(accordion);\r\n    }\r\n  }\r\n\r\n  calculateContentHeight(content) {\r\n    if (!content.parentNode.classList.contains('open')) return;\r\n    let height = 0;\r\n\r\n    const children = Array.prototype.slice.call(content.children);\r\n\r\n    children.forEach( (child) => {\r\n      height += child.scrollHeight;\r\n\r\n      // Add the top margin of first child\r\n      //let firstChildStyle = child.children[0].currentStyle || window.getComputedStyle(child.children[0]);\r\n      //let firstChildHeight = parseInt(firstChildStyle.marginTop.replace('px', ''));\r\n      //height += firstChildHeight;\r\n    });\r\n      \r\n    content.style.maxHeight = `${height}px`;\r\n  }\r\n\r\n  resetContentHeight(content) {\r\n    content.style.maxHeight = '';\r\n  }\r\n\r\n  /**\r\n   * Open an accordion\r\n   * @param {*} accordion The accordion to open \r\n   */\r\n  open(accordion) {\r\n\r\n    // 1. beforeOpen callback\r\n    this.options.beforeOpen(accordion);\r\n\r\n    // 2. Check option conditionals.\r\n    this.closeAll(accordion);\r\n\r\n    // 3. Open accordion\r\n    let content = accordion.querySelector('[data-content]');\r\n    accordion.classList.add('open');\r\n    this.calculateContentHeight(content);\r\n    \r\n    // 4. afterOpen callback\r\n    this.options.afterOpen(accordion);\r\n  }\r\n\r\n  /**\r\n   * Close an accordion\r\n   * @param {*} accordion The accordion to close\r\n   */\r\n  close(accordion) {\r\n\r\n    // 1. beforeClose callback\r\n    this.options.beforeClose(accordion);\r\n\r\n    // 2. Close accordion\r\n    let content = accordion.querySelector('[data-content]');\r\n    accordion.classList.remove('open');\r\n    this.resetContentHeight(content);\r\n\r\n    // 3. afterClose callback\r\n    this.options.afterClose(accordion);\r\n  }\r\n\r\n  /**\r\n   * Closes each accordion.\r\n   * @param {*} accordion The current accordion.\r\n   */\r\n  closeAll(accordion) {\r\n\r\n    // 1. Check if data options were passed.\r\n    let accordionGroup = accordion.parentNode;\r\n    let dataOptions = this.getDataOptions(accordionGroup);\r\n\r\n    if ('singleOpen' in dataOptions) {\r\n      if (dataOptions.singleOpen === false) return;\r\n    } else {\r\n      if (!this.options.singleOpen) return;\r\n    }\r\n\r\n    // 2. Proceed closing accordions\r\n    let accordions = accordionGroup.querySelectorAll('[data-accordion]');\r\n\r\n    accordions.forEach( (accordion) => {\r\n      this.close(accordion);\r\n    });\r\n  }\r\n\r\n  getDataOptions(accordionGroup) {\r\n    let dataOptions = {};\r\n    if (accordionGroup.hasAttribute('data-options')) {\r\n      dataOptions = JSON.parse(accordionGroup.dataset.options);\r\n    }\r\n    return dataOptions;\r\n  }\r\n\r\n  // Returns a function, that, as long as it continues to be invoked, will not\r\n  // be triggered. The function will be called after it stops being called for\r\n  // N milliseconds. If `immediate` is passed, trigger the function on the\r\n  // leading edge, instead of the trailing.\r\n  debounce(func, wait, immediate) {\r\n    var timeout;\r\n    return function() {\r\n      var context = this, args = arguments;\r\n      var later = function() {\r\n        timeout = null;\r\n        if (!immediate) func.apply(context, args);\r\n      };\r\n      var callNow = immediate && !timeout;\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(later, wait);\r\n      if (callNow) func.apply(context, args);\r\n    };\r\n  };\r\n}"]}