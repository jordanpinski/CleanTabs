{"version":3,"sources":["scripts.js","components/clean-tabs.js"],"names":["document","addEventListener","event","window","NodeList","prototype","forEach","Element","matches","webkitMatchesSelector","closest","s","el","this","parentElement","parentNode","nodeType","CleanTabs","cleanTabs","arguments","length","undefined","options","_classCallCheck","_objectSpread","_name","_version","openFirst","beforeOpen","afterOpen","beforeClose","afterClose","addGuids","bindEvents","defaultOptions","_this","cleanTab","guid","tabCount","getDataOptions","init","querySelectorAll","dataOptions","tab","button","buildMobile","querySelector","content","open","_this2","handleTabClick","preventDefault","hash","anchor","target","dataset","concat","closeAll","cleanAccordion","accordion","classList","add","remove","tabGroup","buttons","i","close","accordionGroup","tempContent","createElement","accordionTitle","control","innerText","accordionContent","innerHTML","insertBefore","nextSibling","_this3","initializeCleanAccordion","_this4","CleanAccordion","parseInt","appendChild","index","buttonIndex","hasAttribute","JSON","parse","cleanAccordionGroups","singleOpen","handleResize","debounce","bind","_this5","handleAccordionClick","openClose","_this6","cleanAccordionGroup","calculateContentHeight","contains","style","maxHeight","element","height","scrollHeight","computedStyle","getComputedStyle","marginTop","replace","marginBottom","contents","resetContentHeight","_this7","func","wait","immediate","timeout","context","args","callNow","clearTimeout","apply"],"mappings":"aAAAA,SAASC,iBAAiB,mBAAoB,SAASC,GAErDC,OAAAC,WAAAA,SAAAC,UAAAC,UACAF,SAAWA,UAAPE,QAAoBF,MAASC,UAAUC,SAItCC,QAAQF,UAAUG,UAAvBD,QAAKA,UAAQF,QACXE,QAAQF,UAAUG,mBAGnBD,QAAAF,UAAAI,uBAGCF,QAAQF,UAAUK,UAChBH,QAAMF,UAANK,QAAA,SAAAC,GAAA,IAAIC,EAAKC,KAGP,GACAD,GAAEL,QAAMO,UAAHN,QAAuBO,KAAAA,EAA5BJ,GAAA,OAAAC,QACc,QAHhBA,EAAAA,EAGSA,eAAkBI,EAAAA,aAAa,IAAhBJ,EAAGI,UAC3B,OAAO;+nCClBPC,U,WACJ,SAAAA,IAAqC,IAAzBC,EAAyB,EAAAC,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAb,GAAIG,EAAS,EAAAH,UAAAC,OAAAD,UAAA,QAAAE,EAAAE,gBAAAV,KAAAI,GACnCJ,KAAKK,UAAYA,EACbL,KAAKK,UAAUE,QAAU,IAF/BP,KAAAS,QAAAE,cAAAA,cAAA,GAIyB,CACrBC,MAAO,YACPC,SAAU,QACVC,UAAW,KACXC,WAAY,aACZC,UAAW,aAbjBC,YAAA,aACAC,WAAA,eAGuCT,GAAAT,KAAzBK,Q,oDAmBVL,KAAKmB,WAlBLnB,KAAKK,cACLL,KAAIoB,aAEJpB,KAAMqB,c,mCAAiB,IAAAC,EAAAtB,KAGrBc,EAHqB,EAAAR,UAAAC,aAAAC,I,IAGV,EACXO,KAAAA,UAAYtB,QAAA,SAAA8B,GAGZL,EAAAA,QAAYJ,YAAAU,EAAAF,EAAWb,QAAAK,WAGzB,IAEDW,EAFMhB,EAALa,EAAAI,eAAAH,GACKI,IACNF,EAAAF,EAAAK,iBAAA,iBAAArB,OAAA,EAkBS,cAAesB,IAAaL,EAAOK,EAAYf,WAAaW,EAAWI,EAAYf,UAAYU,IAfvGM,EAAKX,CACLY,OAAKC,EAALC,cAAKD,4BAAAA,OAALR,EAAKQ,OACLE,QAAKd,EAALa,cAAKb,6BAAAA,OAALI,EAAKJ,OACLI,KAAKV,GAsBHQ,EAAKa,KAAKL,O,mCAnBM,IAAAM,EAAApC,KAClBA,KAAAK,UAAKA,QAAL,SAAwBkB,GAEtBA,EAAAnC,iBAAA,QAAA,SAAAC,GAAA+C,EAAAC,eAAAhD,S,qCA0BWA,GArBT,IAED0C,EAuCCD,EA1CFzC,EAAAiD,iBACEjD,EAAIoC,OAAAA,QAAWF,mBA2BfgB,EAAuB,MADvBC,GAxBDT,EAED1C,EAAAoD,OAAA5C,QAAA,kBAsBkBoC,cAAc,MAChBM,MAAcC,EAAOD,KAtBrCf,EAAOO,EAAGW,QAAAlB,KAoCRM,EAAM,CAzBVC,OAAK1B,EACHkB,QATEC,EAGGW,SAALF,cAAAM,GA2BUpD,SAAS8C,cAAT,8CAAAU,OAAqEnB,EAArE,OArBsCA,KAAAA,GAEnDxB,KAAAmC,KAAAL,M,2BAGCzC,GAAMiD,IACHP,EAAsBD,EAAtBC,OAAOU,EAAeX,EAAfW,QAAO5C,EAAQiC,EAARjC,KAIjBG,KAAAS,QAAW+B,aA+BXxC,KAAK4C,SAASd,GAxBL,GAAPI,IAHFV,EAIOO,EAAAlC,QAAA,oBAAA6C,QAAAlB,KAGLU,EADA/C,SAAA8C,cAAA,qCAAAU,OAAAnB,EAAA,OACmBS,cAAT9C,+BAAAA,OAAA2C,EAAAN,KAAArC,OA4BVG,OAAOuD,eAAeV,KAAKW,IAtB3BtB,EAAAA,UAAMA,IAAAA,QAHEU,EAAVa,UAAAC,IAAA,QAiCAhD,KAAKS,QAAQO,c,4BAGTc,GAAK,IAzBHC,EADED,EACFC,OADEG,EAAAJ,EAAAI,QA8BRlC,KAAKS,QAAQQ,cAEbc,EAAOgB,UAAUE,OAAO,QAzBxBf,EAAKU,UAASd,OAEd,QAEE9B,KAAAS,QAAQS,e,+BAIR5B,GAKF4C,IAJC,IAEDgB,EAAApB,EAAAC,OAAAlC,QAAA,mBAuBIsD,EAAUD,EAAStB,iBAAiB,iBACpCM,EAAUgB,EAAStB,iBAAiB,kBAtBjCwB,EAACL,EAAAA,EAAUC,EAAIzC,OAEtB6C,IAAA,CAuBE,IAAItB,EAAM,CAtBZC,OAAKtB,EAAQO,GACdkB,QAAAA,EAAAkB,IAyBGpD,KAAKqD,MAAMvB,M,oCAhBLiB,IAAAA,EAAAA,KAGR/C,KAAAK,UAAaa,QAAAA,SAAbK,GACD,IAAAC,EAAAD,EAAAmB,QAAAlB,KAuBO2B,EAAU5B,EAASK,iBAAiB,mBACpCM,EAAUX,EAASK,iBAAiB,kBApBtCuB,EAAUD,SAAStB,cAAiB,OACxC0B,EAAcJ,QAAStB,kBAAiB,GAwBtC0B,EAAeZ,QAAQY,eAAiB,GAtB1CA,EAAAZ,QAAoBS,KAAQ5C,EAExBwB,IAAAA,IAAAA,EAAQoB,EAAAA,EAAQC,EADR7C,OAAA6C,IAAA,CAAA,IAAVrB,EAAAoB,EAAAC,GAIAG,EAAArB,EAAAkB,GAIJN,EAAA3D,SAAAqE,cAAA,OACFV,EAAAJ,QAAAI,UAAA,GACAA,EAAAJ,QAAAlB,KAAA,CAAA4B,GAyBQ,IAAIK,EAAiBtE,SAASqE,cAAc,OAC5CC,EAAef,QAAQgB,QAzBf,GAAAD,EAAAE,UAAA5B,EAAA4B,UAGNnC,EAAgBkB,SAApBc,cAAA,OACAI,EAAcrC,QAASK,QAAAA,GACvBgC,EAAcrC,UAASK,EAAiBiC,UAGxCf,EAAIQ,YAAiBnE,GACrBmE,EAAAA,YAAAM,GACAN,EAAeZ,YAAQY,GAGvB/B,EAAKrB,WAAY4D,aAAWvD,EAAagB,EAAAwC,aAEvCC,EAAAC,yBAAA1C,EAAA,CAAA+B,Q,+CAMA/B,EAAyB+B,GAEzB,IAAAY,EAAAlE,KAsBA6C,EAAiB,IAAIsB,eAAeb,EAAgB,CArBpDtC,UAAIyC,SAAAA,GAyBJ,IAAIH,EAAiBR,EAAUjD,QAAQ,0BApBvCqD,EAAIU,SAAgB3B,cAAhB2B,+BAAAA,OAAJN,EAAAZ,QAAAlB,KAAIoC,OAIJd,EAASsB,SAACC,EAAYZ,QAAtBjC,MACAsB,EAAUuB,EAAAA,cAAAA,4BAAAA,OAAV7C,EAAU6C,OACVf,EAAAA,EAAee,cAAff,6BAAAA,OAAA9B,EAAA8B,OAsBAY,EAAK/B,KAAK,CAACJ,OAAAA,EAAQG,QAAAA,OAfxB5C,OAAAuD,eAAAA,I,iCAEkD7C,KAAAK,UAAAZ,QAAA,SAAA8B,EAAA+C,GAuB/C/C,EAASmB,QAAQlB,KAAO8C,EArBb/C,EAAAK,iBAACkB,iBAEVrD,QAAA,SAAAsC,EAAAwC,GACAxC,EAAIuB,QAAAA,KAAciB,IAIPH,EAAStB,iBAAA,CAAkBtB,mBAClCO,QAASmB,SAAAA,EAASjB,GACtBC,EAAIA,QAAUgB,KAAAA,Q,qCAEd3B,GAED,GAAAA,EAAAiD,aAAA,gBAdqD,OAAxDC,KAAAC,MAAAnD,EAAAmB,QAAAjC,a,KA+BIyB,e,WACD,SAAAiC,IAFD,IAAAQ,EAAA,EAAArE,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAA,GAAAG,EAAA,EAAAH,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAA,GAAAI,gBAAAV,KAAAmE,GAGDnE,KAZD2E,qBAAAA,EAaD3E,KAAA2E,qBAAApE,QAAA,IAeHP,KAAAS,QAAAE,cAAAA,cAAA,GAQ2B,CACrBC,MAAO,iBArBTC,SAAKU,QACLqD,YAAYF,EACb3D,WAAA,aAuBGC,UAAW,aACXC,YAAa,aACbC,WAAY,eAflBT,GACAT,KAAA6E,aAAA7E,KAAA8E,SAAA9E,KAAA6E,aAAAE,KAAA/E,MAAA,KACAA,KAAA2B,e,6CAEE3B,KAAAoB,e,mCAuBa,IAAA4D,EAAAhF,KAtBXA,KAAK2E,qBAALlF,QAA4BkF,SAAAA,GAC5B9B,EAAS8B,iBAAqBpE,QAAa,SAAAlB,GAAA2F,EAAAC,qBAAA5F,OAKzCuF,OAAAA,iBAHqB,SAAA,WAAAI,EAAAH,mB,2CAKVxF,GACX4B,IAAAA,EAAW5B,EAAEoD,OACbvB,EAAYuB,EAAAvC,WAIduC,EAAKoC,aAAe,iBA2BlB7E,KAAKkF,UAAUpC,K,qCArBlB,IAAAqC,EAAAnF,KA2BCA,KAAK2E,qBAAqBlF,QAAS,SAAC2F,GACjBA,EAAoBxD,iBAAiB,kBAC7CnC,QAAS,SAAAyC,GA3BTiD,EAAAE,uBAAAnD,S,gCAI6CY,GAAkCA,EAAxFC,UAAAuC,SAAA,QACDtF,KAEDqD,MAAAP,GACAxD,KAAAA,KAAOF,K,6CAiCc8C,GAChBA,EAAQhC,WAAW6C,UAAUuC,SAAS,UAC3CpD,EAAQqD,MAAMC,UAAd,GAAA7C,OAA6BT,EAhCV7C,aAgCnB,S,wCAtBCoG,GACF,IAAAC,EAAAD,EAAAE,aA8BKC,EAAgBtG,OAAOuG,iBAAiBJ,GA5B/B,OAAAC,EA6BGtB,SAASwB,EAAcE,UAAUC,QAAQ,KAAM,KAC5C3B,SAASwB,EA9BfI,aAAAD,QAAA,KAAA,O,yCAEG7D,GACd+D,EAAAA,MAASxG,UAAS,K,2BAuCjBqD,GA/BD9C,KAAAS,QAAK4C,WAALP,GAGD9C,KAAA4C,SAAAE,GAoCD,IAAIZ,EAAUY,EAAUb,cAAc,kBACtCa,EAAUC,UAAUC,IAAI,QAjCxBhD,KAAAqF,uBAAwBtC,GAI1B/C,KAAAS,QAAAO,UAAA8B,K,4BAwCMA,GAjCJ9C,KAAAS,QAAIqF,YAAY1B,GAGjB,IAAAlC,EAAAY,EAAAb,cAAA,kBAqCCa,EAAUC,UAAUE,OAAO,QAC3BjD,KAAKkG,mBAAmBhE,GAlCzBlC,KAAAS,QAAAS,WAAA4B,K,+BA4CQA,GAAW,IAAAqD,EAAAnG,KApClBsD,EAAavC,EAAW+B,WAwCpBjB,EAAc7B,KAAK0B,eAAe4B,GAEtC,GAAI,eAAgBzB,GApCpB,IAAwBI,IAApBC,EAAUY,WAAwB,YAEtC,IAAKuC,KAAAA,QAAAA,WAAuBnD,OAM9BoB,EAAA1B,iBAAA,oBAEFnC,QAAA,SAAAqD,GACAqD,EAAA9C,MAAAP,O,qCAuCiBQ,GApCb,IAAAzB,EAAA,GAKAiB,OAJAQ,EAAarC,aAAY6B,kBAsCvBjB,EAAc4C,KAAKC,MAAMpB,EAAeZ,QAAQjC,UAlClDqC,I,+BASJsD,EAAAC,EAAAC,GACA,IAAAC,EAmCI,OAAO,WACL,IAAIC,EAAUxG,KAAMyG,EAAOnG,UAjC7BoG,EAAAJ,IAAAC,EACAI,aAAIrD,GACJiD,EAAI1E,WAgCU,WACV0E,EAAU,KArCID,GAAAF,EAAAQ,MAAAJ,EAAAC,IAIK/E,GAuCjBgF,GAASN,EAAKQ,MAAMJ,EAASC,U","file":"clean-tabs.min.js","sourcesContent":["document.addEventListener('DOMContentLoaded', function(event) {\r\n\r\n  // Polyfills\r\n  if (window.NodeList && !NodeList.prototype.forEach) {\r\n    NodeList.prototype.forEach = Array.prototype.forEach;\r\n  }\r\n\r\n  if (!Element.prototype.matches) {\r\n    Element.prototype.matches =\r\n      Element.prototype.msMatchesSelector || \r\n      Element.prototype.webkitMatchesSelector;\r\n  }\r\n  \r\n  if (!Element.prototype.closest) {\r\n    Element.prototype.closest = function(s) {\r\n      var el = this;\r\n  \r\n      do {\r\n        if (Element.prototype.matches.call(el, s)) return el;\r\n        el = el.parentElement || el.parentNode;\r\n      } while (el !== null && el.nodeType === 1);\r\n      return null;\r\n    };\r\n  }\r\n\r\n});\r\n","/**\r\n * Plugin entry point.\r\n */\r\nclass CleanTabs {\r\n  constructor(cleanTabs = [], options) {\r\n    this.cleanTabs = cleanTabs;\r\n    if (this.cleanTabs.length <= 0) return;\r\n\r\n    const defaultOptions = {\r\n      _name: 'CleanTabs',\r\n      _version: '1.0.1',\r\n      openFirst: null,\r\n      beforeOpen: (tab) => {},\r\n      afterOpen: (tab) => {},\r\n      beforeClose: (tab) => {},\r\n      afterClose: (tab) => {}  \r\n    }\r\n\r\n    this.options = { ...defaultOptions, ...options };\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.addGuids();\r\n    this.buildMobile();\r\n    this.bindEvents();\r\n    this.openFirst();\r\n  }\r\n\r\n  openFirst(guid = 0) {\r\n    this.cleanTabs.forEach( (cleanTab) => {\r\n\r\n      // 1. Check if openFirst option was passed.\r\n      if (this.options.openFirst) guid = this.options.openFirst;\r\n\r\n      let dataOptions = this.getDataOptions(cleanTab);\r\n      if (dataOptions) {\r\n        let tabCount = cleanTab.querySelectorAll('[data-button]').length - 1;\r\n        if ('openFirst' in dataOptions) guid = dataOptions.openFirst <= tabCount ? dataOptions.openFirst : guid;\r\n      }\r\n\r\n      // 2. Open the tab\r\n      let tab = {\r\n        button: cleanTab.querySelector(`[data-button][data-guid=\"${guid}\"]`),\r\n        content: cleanTab.querySelector(`[data-content][data-guid=\"${guid}\"]`),\r\n        guid: guid,\r\n      }\r\n\r\n      this.open(tab);\r\n    });\r\n  }\r\n\r\n  bindEvents() {\r\n    this.cleanTabs.forEach( (cleanTab) => {\r\n      cleanTab.addEventListener('click', (event) => { this.handleTabClick(event); })\r\n    });\r\n  }\r\n\r\n  handleTabClick(event) {\r\n    event.preventDefault();\r\n    if(!event.target.closest('[data-button]')) return;\r\n\r\n    let button = event.target.closest('[data-button]');\r\n    let anchor = button.querySelector('a');\r\n    let hash = anchor.hash !== '' ? anchor.hash : false;\r\n    let guid = button.dataset.guid;\r\n    let content;\r\n\r\n    if (hash) {\r\n\r\n      // Target is defined in the anchor's hash\r\n      content = document.querySelector(hash);\r\n    } else {\r\n\r\n      // If target isn't defined in anchor's hash use the buttons guid.\r\n      content = document.querySelector(`[data-tab-group] [data-content][data-guid=\"${guid}\"]`);\r\n    }\r\n\r\n    let tab = {\r\n      button: button,\r\n      content: content,\r\n      guid: guid\r\n    }\r\n\r\n    this.open(tab);\r\n  }\r\n\r\n  // TODO: Refactor this. Should use index or id to open. Building a tab object is too much work.\r\n  open(tab) {\r\n    let { button, content, guid } = tab;\r\n    \r\n    // 1. Before open callback\r\n    this.options.beforeOpen();\r\n\r\n    // 2. Close all open tabs\r\n    this.closeAll(tab);\r\n    \r\n    // 3. Open mobile\r\n    if (guid >= 0) {\r\n      let guid = button.closest('[data-tab-group]').dataset.guid;\r\n      let accordionGroup = document.querySelector(`[data-accordion-group][data-guid=\"${guid}\"]`);\r\n      let accordion = accordionGroup.querySelector(`[data-accordion][data-guid=\"${tab.guid}\"]`);\r\n  \r\n      window.cleanAccordion.open(accordion);\r\n    }\r\n\r\n    // 3. Open\r\n    button.classList.add('open');\r\n    content.classList.add('open');\r\n\r\n    // 4. After open callback\r\n    this.options.afterOpen();\r\n  }\r\n\r\n  close(tab) {\r\n    let { button, content } = tab;\r\n\r\n    // 1. Before close callback\r\n    this.options.beforeClose();\r\n\r\n    button.classList.remove('open');\r\n    content.classList.remove('open');\r\n\r\n    // 2. After close callback\r\n    this.options.afterClose();\r\n  }\r\n\r\n  closeAll(tab) {\r\n    let tabGroup = tab.button.closest('[data-tab-group');\r\n    let buttons = tabGroup.querySelectorAll('[data-button]');\r\n    let content = tabGroup.querySelectorAll('[data-content]');\r\n\r\n    for (var i = 0; i < buttons.length; i++) {\r\n      let tab = {\r\n        button: buttons[i],\r\n        content: content[i]\r\n      }\r\n      this.close(tab);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Builds the mobile accordion\r\n   */\r\n  buildMobile() {\r\n\r\n    this.cleanTabs.forEach( (cleanTab) => {\r\n      let guid = cleanTab.dataset.guid;\r\n      let buttons = cleanTab.querySelectorAll('[data-button] a');\r\n      let content = cleanTab.querySelectorAll('[data-content]');\r\n\r\n      // 1. Create the accordion group\r\n      let accordionGroup = document.createElement('div');\r\n      accordionGroup.dataset.accordionTabGroup = '';\r\n      accordionGroup.dataset.accordionGroup = '';\r\n      accordionGroup.dataset.guid = guid;\r\n\r\n      for (var i = 0; i < buttons.length; i++) {\r\n\r\n        let button = buttons[i];\r\n        let tempContent = content[i];\r\n\r\n        // 2. Create an accordion for each tab\r\n        let accordion = document.createElement('div');\r\n        accordion.dataset.accordion = \"\";\r\n        accordion.dataset.guid = [i];\r\n\r\n        // Create the accordion title\r\n        let accordionTitle = document.createElement('div');\r\n        accordionTitle.dataset.control = \"\";\r\n        accordionTitle.innerText = button.innerText;\r\n  \r\n        // Create the accordion content\r\n        let accordionContent = document.createElement('div');\r\n        accordionContent.dataset.content = \"\";\r\n        accordionContent.innerHTML = tempContent.innerHTML;\r\n        \r\n        accordion.appendChild(accordionTitle)\r\n        accordion.appendChild(accordionContent);\r\n        accordionGroup.appendChild(accordion);\r\n      }\r\n\r\n      cleanTab.parentNode.insertBefore(accordionGroup, cleanTab.nextSibling);\r\n      this.initializeCleanAccordion(cleanTab, [accordionGroup]);\r\n    });\r\n\r\n  }\r\n\r\n  initializeCleanAccordion(cleanTab, accordionGroup) {\r\n    let cleanAccordion = new CleanAccordion(accordionGroup, {\r\n      afterOpen: (accordion) => {\r\n\r\n        // 1. Find the corresponding tab group\r\n        let accordionGroup = accordion.closest('[data-accordion-group]');\r\n        let tabGroup = document.querySelector(`[data-tab-group][data-guid=\"${accordionGroup.dataset.guid}\"]`);\r\n\r\n        // 2. Find the corresponding tab by guid.\r\n        let guid = parseInt(accordion.dataset.guid);\r\n        let button = tabGroup.querySelector(`[data-button][data-guid=\"${guid}\"]`);\r\n        let content = tabGroup.querySelector(`[data-content][data-guid=\"${guid}\"]`);\r\n\r\n        this.open({button, content});\r\n        \r\n      }\r\n    });\r\n\r\n    window.cleanAccordion = cleanAccordion;\r\n  }\r\n\r\n  addGuids() {\r\n    this.cleanTabs.forEach( (cleanTab, index) => {\r\n      cleanTab.dataset.guid = index;\r\n\r\n      let buttons = cleanTab.querySelectorAll('[data-button]');\r\n      buttons.forEach( (button, buttonIndex) => {\r\n        button.dataset.guid = buttonIndex;\r\n      })\r\n\r\n      let contents = cleanTab.querySelectorAll(['[data-content]']);\r\n      contents.forEach( (content, contentIndex) => {\r\n        content.dataset.guid = contentIndex;\r\n      })\r\n    });\r\n  }\r\n\r\n  getDataOptions(cleanTab) {\r\n    if (!cleanTab.hasAttribute('data-options')) return;\r\n    return JSON.parse(cleanTab.dataset.options);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// TODO: Add aria support\r\n\r\n/**\r\n * Entry point to the plugin.\r\n */\r\nclass CleanAccordion {\r\n  constructor(cleanAccordionGroups = [], options = {}) {\r\n    this.cleanAccordionGroups = cleanAccordionGroups;\r\n    if (this.cleanAccordionGroups.length <= 0) return;\r\n\r\n    const defaultOptions = {\r\n      _name: \"CleanAccordion\",\r\n      _version: \"1.0.0\",\r\n      singleOpen: true,                 // Should only one accordion be open at a time?\r\n      beforeOpen: (accordion) => {},\r\n      afterOpen: (accordion) => {},\r\n      beforeClose: (accordion) => {},\r\n      afterClose: (accordion) => {}\r\n    }\r\n\r\n    this.options = { ...defaultOptions, ...options }\r\n    this.handleResize = this.debounce(this.handleResize.bind(this), 100);\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.bindEvents();\r\n  }\r\n\r\n  bindEvents() {\r\n\r\n    // cleanAccordionGroup click events\r\n    this.cleanAccordionGroups.forEach( (cleanAccordion) => {\r\n      cleanAccordion.addEventListener('click', (event) => { this.handleAccordionClick(event) });\r\n    });\r\n\r\n    // Resizing\r\n    window.addEventListener('resize', () => { this.handleResize() })\r\n  }\r\n\r\n  handleAccordionClick(event) {\r\n    let target = event.target;\r\n    let accordion = target.parentNode\r\n\r\n    // 1. Check if the title was clicked\r\n    if (target.hasAttribute('data-control')) {\r\n\r\n      // 2. Open/Close the accordion\r\n      this.openClose(accordion);\r\n\r\n    }\r\n  }\r\n\r\n  handleResize() {\r\n    this.cleanAccordionGroups.forEach( (cleanAccordionGroup) => {\r\n      const contents = cleanAccordionGroup.querySelectorAll('[data-content]');\r\n      contents.forEach( content => {\r\n        this.calculateContentHeight(content);\r\n      });\r\n    });\r\n  }\r\n\r\n  openClose(accordion) {\r\n    if (accordion.classList.contains('open')) {\r\n      this.close(accordion);\r\n    } else {\r\n      this.open(accordion);\r\n    }\r\n  }\r\n\r\n  calculateContentHeight(content) {\r\n    if (!content.parentNode.classList.contains('open')) return;\r\n    content.style.maxHeight = `${content.scrollHeight}px`;\r\n  }\r\n  \r\n  /**\r\n   * Returns the computed height including margin of the passed element\r\n   * @param {object} element \r\n   */\r\n  getComputedHeight(element) {\r\n    let height = element.scrollHeight\r\n    let computedStyle = window.getComputedStyle(element);\r\n    let marginTop = parseInt(computedStyle.marginTop.replace('px', ''));\r\n    let marginBottom = parseInt(computedStyle.marginBottom.replace('px', ''));\r\n    return height + marginTop + marginBottom;\r\n  }\r\n\r\n  resetContentHeight(content) {\r\n    content.style.maxHeight = '';\r\n  }\r\n\r\n  /**\r\n   * Open an accordion\r\n   * @param {*} accordion The accordion to open \r\n   */\r\n  open(accordion) {\r\n    // 1. beforeOpen callback\r\n    this.options.beforeOpen(accordion);\r\n\r\n    // 2. Check option conditionals.\r\n    this.closeAll(accordion);\r\n\r\n    // 3. Open accordion\r\n    let content = accordion.querySelector('[data-content]');\r\n    accordion.classList.add('open');\r\n    this.calculateContentHeight(content);\r\n    \r\n    // 4. afterOpen callback\r\n    this.options.afterOpen(accordion);\r\n  }\r\n\r\n  /**\r\n   * Close an accordion\r\n   * @param {*} accordion The accordion to close\r\n   */\r\n  close(accordion) {\r\n\r\n    // 1. beforeClose callback\r\n    this.options.beforeClose(accordion);\r\n\r\n    // 2. Close accordion\r\n    let content = accordion.querySelector('[data-content]');\r\n    accordion.classList.remove('open');\r\n    this.resetContentHeight(content);\r\n\r\n    // 3. afterClose callback\r\n    this.options.afterClose(accordion);\r\n  }\r\n\r\n  /**\r\n   * Closes each accordion.\r\n   * @param {*} accordion The current accordion.\r\n   */\r\n  closeAll(accordion) {\r\n\r\n    // 1. Check if data options were passed.\r\n    let accordionGroup = accordion.parentNode;\r\n    let dataOptions = this.getDataOptions(accordionGroup);\r\n\r\n    if ('singleOpen' in dataOptions) {\r\n      if (dataOptions.singleOpen === false) return;\r\n    } else {\r\n      if (!this.options.singleOpen) return;\r\n    }\r\n\r\n    // 2. Proceed closing accordions\r\n    let accordions = accordionGroup.querySelectorAll('[data-accordion]');\r\n\r\n    accordions.forEach( (accordion) => {\r\n      this.close(accordion);\r\n    });\r\n  }\r\n\r\n  getDataOptions(accordionGroup) {\r\n    let dataOptions = {};\r\n    if (accordionGroup.hasAttribute('data-options')) {\r\n      dataOptions = JSON.parse(accordionGroup.dataset.options);\r\n    }\r\n    return dataOptions;\r\n  }\r\n\r\n  // Returns a function, that, as long as it continues to be invoked, will not\r\n  // be triggered. The function will be called after it stops being called for\r\n  // N milliseconds. If `immediate` is passed, trigger the function on the\r\n  // leading edge, instead of the trailing.\r\n  debounce(func, wait, immediate) {\r\n    var timeout;\r\n    return function() {\r\n      var context = this, args = arguments;\r\n      var later = function() {\r\n        timeout = null;\r\n        if (!immediate) func.apply(context, args);\r\n      };\r\n      var callNow = immediate && !timeout;\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(later, wait);\r\n      if (callNow) func.apply(context, args);\r\n    };\r\n  };\r\n}"]}