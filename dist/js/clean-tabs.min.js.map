{"version":3,"sources":["scripts.js","components/clean-tabs.js"],"names":["document","addEventListener","event","window","NodeList","prototype","forEach","Element","matches","webkitMatchesSelector","closest","s","el","this","parentElement","parentNode","nodeType","CleanTabs","cleanTabs","arguments","length","undefined","options","_classCallCheck","_objectSpread","_name","_version","openFirst","beforeOpen","afterOpen","beforeClose","afterClose","addGuids","bindEvents","defaultOptions","_this","guid","tab","cleanTab","querySelector","concat","content","open","buildMobile","_this2","handleTabClick","button","preventDefault","target","hash","anchor","dataset","closeAll","accordion","cleanAccordion","classList","remove","tabGroup","buttons","querySelectorAll","i","add","close","accordionGroup","tempContent","createElement","accordionTitle","control","innerText","accordionContent","innerHTML","appendChild","insertBefore","nextSibling","_this3","initializeCleanAccordion","_this4","CleanAccordion","parseInt","index","buttonIndex","cleanAccordionGroups","contents","singleOpen","handleResize","debounce","bind","init","_this5","handleAccordionClick","hasAttribute","openClose","_this6","cleanAccordionGroup","calculateContentHeight","contains","maxHeight","scrollHeight","element","height","computedStyle","getComputedStyle","marginTop","replace","marginBottom","style","resetContentHeight","_this7","dataOptions","func","wait","immediate","timeout","context","args","clearTimeout","setTimeout","apply","callNow"],"mappings":"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","file":"clean-tabs.min.js","sourcesContent":["document.addEventListener('DOMContentLoaded', function(event) {\r\n\r\n  // Polyfills\r\n  if (window.NodeList && !NodeList.prototype.forEach) {\r\n    NodeList.prototype.forEach = Array.prototype.forEach;\r\n  }\r\n\r\n  if (!Element.prototype.matches) {\r\n    Element.prototype.matches =\r\n      Element.prototype.msMatchesSelector || \r\n      Element.prototype.webkitMatchesSelector;\r\n  }\r\n  \r\n  if (!Element.prototype.closest) {\r\n    Element.prototype.closest = function(s) {\r\n      var el = this;\r\n  \r\n      do {\r\n        if (Element.prototype.matches.call(el, s)) return el;\r\n        el = el.parentElement || el.parentNode;\r\n      } while (el !== null && el.nodeType === 1);\r\n      return null;\r\n    };\r\n  }\r\n\r\n});\r\n","/**\r\n * Plugin entry point.\r\n */\r\nclass CleanTabs {\r\n  constructor(cleanTabs = [], options) {\r\n    this.cleanTabs = cleanTabs;\r\n    if (this.cleanTabs.length <= 0) return;\r\n\r\n    const defaultOptions = {\r\n      _name: 'CleanTabs',\r\n      _version: '1.0.1',\r\n      openFirst: null,\r\n      beforeOpen: (tab) => {},\r\n      afterOpen: (tab) => {},\r\n      beforeClose: (tab) => {},\r\n      afterClose: (tab) => {}  \r\n    }\r\n\r\n    this.options = { ...defaultOptions, ...options };\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.addGuids();\r\n    this.buildMobile();\r\n    this.bindEvents();\r\n    this.openFirst();\r\n  }\r\n\r\n  openFirst(guid = 0) {\r\n    if (this.options.openFirst) guid = this.options.openFirst;\r\n    this.cleanTabs.forEach( (cleanTab) => {\r\n      let tab = {\r\n        button: cleanTab.querySelector(`[data-button][data-guid=\"${guid}\"]`),\r\n        content: cleanTab.querySelector(`[data-content][data-guid=\"${guid}\"]`),\r\n        guid: guid,\r\n      }\r\n\r\n      this.open(tab);\r\n    });\r\n  }\r\n\r\n  bindEvents() {\r\n    this.cleanTabs.forEach( (cleanTab) => {\r\n      cleanTab.addEventListener('click', (event) => { this.handleTabClick(event); })\r\n    });\r\n  }\r\n\r\n  handleTabClick(event) {\r\n    event.preventDefault;\r\n    if(!event.target.closest('[data-button]')) return;\r\n\r\n    let button = event.target.closest('[data-button]');\r\n    let anchor = button.querySelector('a');\r\n    let hash = anchor.hash !== '' ? anchor.hash : false;\r\n    let guid = button.dataset.guid;\r\n    let content;\r\n\r\n    if (hash) {\r\n\r\n      // Target is defined in the anchor's hash\r\n      content = document.querySelector(hash);\r\n    } else {\r\n\r\n      // If target isn't defined in anchor's hash use the buttons guid.\r\n      content = document.querySelector(`[data-tab-group] [data-content][data-guid=\"${guid}\"]`);\r\n    }\r\n\r\n    let tab = {\r\n      button: button,\r\n      content: content,\r\n      guid: guid\r\n    }\r\n\r\n    this.open(tab);\r\n  }\r\n\r\n  open(tab) {\r\n    let { button, content, guid } = tab;\r\n    \r\n    // 1. Before open callback\r\n    this.options.beforeOpen();\r\n\r\n    // 2. Close all open tabs\r\n    this.closeAll(tab);\r\n    \r\n    // 3. Open mobile\r\n    if (guid >= 0) {\r\n      let guid = button.closest('[data-tab-group]').dataset.guid;\r\n      let accordionGroup = document.querySelector(`[data-accordion-group][data-guid=\"${guid}\"]`);\r\n      let accordion = accordionGroup.querySelector(`[data-accordion][data-guid=\"${tab.guid}\"]`);\r\n  \r\n      window.cleanAccordion.open(accordion);\r\n    }\r\n\r\n    // 3. Open\r\n    button.classList.add('open');\r\n    content.classList.add('open');\r\n\r\n    // 4. After open callback\r\n    this.options.afterOpen();\r\n  }\r\n\r\n  close(tab) {\r\n    let { button, content } = tab;\r\n\r\n    // 1. Before close callback\r\n    this.options.beforeClose();\r\n\r\n    button.classList.remove('open');\r\n    content.classList.remove('open');\r\n\r\n    // 2. After close callback\r\n    this.options.afterClose();\r\n  }\r\n\r\n  closeAll(tab) {\r\n    let tabGroup = tab.button.closest('[data-tab-group');\r\n    let buttons = tabGroup.querySelectorAll('[data-button]');\r\n    let content = tabGroup.querySelectorAll('[data-content]');\r\n\r\n    for (var i = 0; i < buttons.length; i++) {\r\n      let tab = {\r\n        button: buttons[i],\r\n        content: content[i]\r\n      }\r\n      this.close(tab);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Builds the mobile accordion\r\n   */\r\n  buildMobile() {\r\n\r\n    this.cleanTabs.forEach( (cleanTab) => {\r\n      let guid = cleanTab.dataset.guid;\r\n      let buttons = cleanTab.querySelectorAll('[data-button] a');\r\n      let content = cleanTab.querySelectorAll('[data-content]');\r\n\r\n      // 1. Create the accordion group\r\n      let accordionGroup = document.createElement('div');\r\n      accordionGroup.dataset.accordionGroup = \"\";\r\n      accordionGroup.dataset.guid = guid;\r\n\r\n      for (var i = 0; i < buttons.length; i++) {\r\n\r\n        let button = buttons[i];\r\n        let tempContent = content[i];\r\n\r\n        // 2. Create an accordion for each tab\r\n        let accordion = document.createElement('div');\r\n        accordion.dataset.accordion = \"\";\r\n        accordion.dataset.guid = [i];\r\n\r\n        // Create the accordion title\r\n        let accordionTitle = document.createElement('div');\r\n        accordionTitle.dataset.control = \"\";\r\n        accordionTitle.innerText = button.innerText;\r\n  \r\n        // Create the accordion content\r\n        let accordionContent = document.createElement('div');\r\n        accordionContent.dataset.content = \"\";\r\n        accordionContent.innerHTML = tempContent.innerHTML;\r\n        \r\n        accordion.appendChild(accordionTitle)\r\n        accordion.appendChild(accordionContent);\r\n        accordionGroup.appendChild(accordion);\r\n      }\r\n\r\n      cleanTab.parentNode.insertBefore(accordionGroup, cleanTab.nextSibling);\r\n      this.initializeCleanAccordion(cleanTab, [accordionGroup]);\r\n    });\r\n\r\n  }\r\n\r\n  initializeCleanAccordion(cleanTab, accordionGroup) {\r\n    let cleanAccordion = new CleanAccordion(accordionGroup, {\r\n      afterOpen: (accordion) => {\r\n\r\n        // 1. Find the corresponding tab group\r\n        let accordionGroup = accordion.closest('[data-accordion-group]');\r\n        let tabGroup = document.querySelector(`[data-tab-group][data-guid=\"${accordionGroup.dataset.guid}\"]`);\r\n\r\n        // 2. Find the corresponding tab by guid.\r\n        let guid = parseInt(accordion.dataset.guid);\r\n        let button = tabGroup.querySelector(`[data-button][data-guid=\"${guid}\"]`);\r\n        let content = tabGroup.querySelector(`[data-content][data-guid=\"${guid}\"]`);\r\n\r\n        this.open({button, content});\r\n        \r\n      }\r\n    });\r\n\r\n    window.cleanAccordion = cleanAccordion;\r\n  }\r\n\r\n  addGuids() {\r\n    this.cleanTabs.forEach( (cleanTab, index) => {\r\n      cleanTab.dataset.guid = index;\r\n\r\n      let buttons = cleanTab.querySelectorAll('[data-button]');\r\n      buttons.forEach( (button, buttonIndex) => {\r\n        button.dataset.guid = buttonIndex;\r\n      })\r\n\r\n      let contents = cleanTab.querySelectorAll(['[data-content]']);\r\n      contents.forEach( (content, contentIndex) => {\r\n        content.dataset.guid = contentIndex;\r\n      })\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// TODO: Add aria support\r\n\r\n/**\r\n * Entry point to the plugin.\r\n */\r\nclass CleanAccordion {\r\n  constructor(cleanAccordionGroups = [], options = {}) {\r\n    this.cleanAccordionGroups = cleanAccordionGroups;\r\n    if (this.cleanAccordionGroups.length <= 0) return;\r\n\r\n    const defaultOptions = {\r\n      _name: \"CleanAccordion\",\r\n      _version: \"1.0.0\",\r\n      singleOpen: true,                 // Should only one accordion be open at a time?\r\n      beforeOpen: (accordion) => {},\r\n      afterOpen: (accordion) => {},\r\n      beforeClose: (accordion) => {},\r\n      afterClose: (accordion) => {}\r\n    }\r\n\r\n    this.options = { ...defaultOptions, ...options }\r\n    this.handleResize = this.debounce(this.handleResize.bind(this), 100);\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.bindEvents();\r\n  }\r\n\r\n  bindEvents() {\r\n\r\n    // cleanAccordionGroup click events\r\n    this.cleanAccordionGroups.forEach( (cleanAccordion) => {\r\n      cleanAccordion.addEventListener('click', (event) => { this.handleAccordionClick(event) });\r\n    });\r\n\r\n    // Resizing\r\n    window.addEventListener('resize', () => { this.handleResize() })\r\n  }\r\n\r\n  handleAccordionClick(event) {\r\n    let target = event.target;\r\n    let accordion = target.parentNode\r\n\r\n    // 1. Check if the title was clicked\r\n    if (target.hasAttribute('data-control')) {\r\n\r\n      // 2. Open/Close the accordion\r\n      this.openClose(accordion);\r\n\r\n    }\r\n  }\r\n\r\n  handleResize() {\r\n    this.cleanAccordionGroups.forEach( (cleanAccordionGroup) => {\r\n      const contents = cleanAccordionGroup.querySelectorAll('[data-content]');\r\n      contents.forEach( content => {\r\n        this.calculateContentHeight(content);\r\n      });\r\n    });\r\n  }\r\n\r\n  openClose(accordion) {\r\n    if (accordion.classList.contains('open')) {\r\n      this.close(accordion);\r\n    } else {\r\n      this.open(accordion);\r\n    }\r\n  }\r\n\r\n  calculateContentHeight(content) {\r\n    if (!content.parentNode.classList.contains('open')) return;\r\n    content.style.maxHeight = `${content.scrollHeight}px`;\r\n  }\r\n  \r\n  /**\r\n   * Returns the computed height including margin of the passed element\r\n   * @param {object} element \r\n   */\r\n  getComputedHeight(element) {\r\n    let height = element.scrollHeight\r\n    let computedStyle = window.getComputedStyle(element);\r\n    let marginTop = parseInt(computedStyle.marginTop.replace('px', ''));\r\n    let marginBottom = parseInt(computedStyle.marginBottom.replace('px', ''));\r\n    return height + marginTop + marginBottom;\r\n  }\r\n\r\n  resetContentHeight(content) {\r\n    content.style.maxHeight = '';\r\n  }\r\n\r\n  /**\r\n   * Open an accordion\r\n   * @param {*} accordion The accordion to open \r\n   */\r\n  open(accordion) {\r\n    // 1. beforeOpen callback\r\n    this.options.beforeOpen(accordion);\r\n\r\n    // 2. Check option conditionals.\r\n    this.closeAll(accordion);\r\n\r\n    // 3. Open accordion\r\n    let content = accordion.querySelector('[data-content]');\r\n    accordion.classList.add('open');\r\n    this.calculateContentHeight(content);\r\n    \r\n    // 4. afterOpen callback\r\n    this.options.afterOpen(accordion);\r\n  }\r\n\r\n  /**\r\n   * Close an accordion\r\n   * @param {*} accordion The accordion to close\r\n   */\r\n  close(accordion) {\r\n\r\n    // 1. beforeClose callback\r\n    this.options.beforeClose(accordion);\r\n\r\n    // 2. Close accordion\r\n    let content = accordion.querySelector('[data-content]');\r\n    accordion.classList.remove('open');\r\n    this.resetContentHeight(content);\r\n\r\n    // 3. afterClose callback\r\n    this.options.afterClose(accordion);\r\n  }\r\n\r\n  /**\r\n   * Closes each accordion.\r\n   * @param {*} accordion The current accordion.\r\n   */\r\n  closeAll(accordion) {\r\n\r\n    // 1. Check if data options were passed.\r\n    let accordionGroup = accordion.parentNode;\r\n    let dataOptions = this.getDataOptions(accordionGroup);\r\n\r\n    if ('singleOpen' in dataOptions) {\r\n      if (dataOptions.singleOpen === false) return;\r\n    } else {\r\n      if (!this.options.singleOpen) return;\r\n    }\r\n\r\n    // 2. Proceed closing accordions\r\n    let accordions = accordionGroup.querySelectorAll('[data-accordion]');\r\n\r\n    accordions.forEach( (accordion) => {\r\n      this.close(accordion);\r\n    });\r\n  }\r\n\r\n  getDataOptions(accordionGroup) {\r\n    let dataOptions = {};\r\n    if (accordionGroup.hasAttribute('data-options')) {\r\n      dataOptions = JSON.parse(accordionGroup.dataset.options);\r\n    }\r\n    return dataOptions;\r\n  }\r\n\r\n  // Returns a function, that, as long as it continues to be invoked, will not\r\n  // be triggered. The function will be called after it stops being called for\r\n  // N milliseconds. If `immediate` is passed, trigger the function on the\r\n  // leading edge, instead of the trailing.\r\n  debounce(func, wait, immediate) {\r\n    var timeout;\r\n    return function() {\r\n      var context = this, args = arguments;\r\n      var later = function() {\r\n        timeout = null;\r\n        if (!immediate) func.apply(context, args);\r\n      };\r\n      var callNow = immediate && !timeout;\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(later, wait);\r\n      if (callNow) func.apply(context, args);\r\n    };\r\n  };\r\n}"]}